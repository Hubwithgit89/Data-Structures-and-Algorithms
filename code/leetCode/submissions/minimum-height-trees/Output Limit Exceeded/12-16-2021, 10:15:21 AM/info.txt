{"id":602540527,"lang":"java","time":"6 days, 10 hours","timestamp":1639629921,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/602540527/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"N/A","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        HashMap<Integer, List<Integer>> map= new HashMap<>();\n        \n        \n        for(int i=0;i<edges.length;i++){\n            \n            List<Integer> connectingNodes = map.getOrDefault(edges[i][0], new ArrayList<>());\n            connectingNodes.add(edges[i][1]);\n            map.put(edges[i][0], connectingNodes);\n            \n            connectingNodes = map.getOrDefault(edges[i][1], new ArrayList<>());\n            connectingNodes.add(edges[i][0]);\n            map.put(edges[i][1], connectingNodes);\n        }\n        \n        System.out.println(map);\n        \n        List<Integer> list = new ArrayList<>();\n        \n        for(int i=0;i<n;i++){list.add(0);}\n        int min = Integer.MAX_VALUE;\n        for(int i=0;i<n;i++){\n            \n            boolean[] visited = new boolean[n];\n            Queue<Integer> q = new LinkedList<>();\n            \n            q.offer(i);\n            int count=0;\n            while(!q.isEmpty()){\n                System.out.println(\"Queue:: \"+Arrays.toString(q.toArray()));\n                int qSize = q.size();\n                for(int j=1;j<=qSize;j++){\n                    int currentNode = q.poll();\n                    if(j==1){ \n                        count++;\n                    }\n                    visited[currentNode] = true;\n                    \n                    if(map.containsKey(currentNode)){\n                        List<Integer> adj = map.get(currentNode);\n                        \n                        for(int k=0;k < adj.size();k++){\n                            // System.out.println(\" Adjacent::: \"+ adj.get(k)+ \" -\"+ visited[adj.get(k)]);\n                            if(visited[adj.get(k)] == false){\n                                q.offer(adj.get(k));\n                            }\n                        }\n                    }\n                }\n                // System.out.println(\"End Queue:: \"+Arrays.toString(q.toArray()));\n            }\n            min = Math.min(min, count);\n            list.set(i, count);\n            System.out.println(Arrays.toString(list.toArray()));\n        }\n        \n        \n        List<Integer> result = new ArrayList<>();\n        \n        for(int i=0;i<list.size();i++){\n            if(list.get(i) == min){\n                result.add(i);\n            }\n        }\n        \n        return result;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111110000000000000000","title_slug":"minimum-height-trees"}