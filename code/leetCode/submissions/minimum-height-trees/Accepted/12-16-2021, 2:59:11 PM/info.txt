{"id":602644978,"lang":"java","time":"6 days, 5 hours","timestamp":1639646951,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/602644978/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"51.6 MB","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        List<List<Integer>> myGraph = new ArrayList<List<Integer>>();\n        List<Integer> res = new ArrayList<Integer>();\n        if (n==1) {\n            res.add(0);\n            return res;\n        }\n        \n        int[] degree = new int[n];\n        \n        for(int i=0; i<n; i++) {\n            myGraph.add(new ArrayList<Integer>());\n        }\n        \n        for(int i=0; i<edges.length; i++) {\n            myGraph.get(edges[i][0]).add(edges[i][1]);\n            myGraph.get(edges[i][1]).add(edges[i][0]);\n            degree[edges[i][0]]++;\n            degree[edges[i][1]]++;\n        }\n        \n        Queue<Integer> myQueue = new ArrayDeque<Integer>();\n\n        for(int i=0; i<n; i++) \n            if (degree[i]==0) \n                return res;\n            else if (degree[i]==1) {\n                myQueue.offer(i);\n            }\n\n        while (!myQueue.isEmpty()) {\n            res = new ArrayList<Integer>();\n            int count = myQueue.size();\n\n            for(int i=0; i<count; i++){\n                int curr = myQueue.poll();\n                res.add(curr);\n                degree[curr]--;\n                for(int k=0; k<myGraph.get(curr).size(); k++) {\n                    int next = myGraph.get(curr).get(k);\n                    // if (degree[next]==0) continue;\n                    if (degree[next]==2) {\n                        myQueue.offer(next);\n                    }\n                    degree[next]--;\n                }\n            }      \t\n        }\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees"}