{"id":603405560,"lang":"java","time":"4 days, 10 hours","timestamp":1639800453,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/603405560/","is_pending":"Not Pending","title":"Numbers At Most N Given Digit Set","memory":"N/A","code":"class Solution {\n    \n    public int atMostNGivenDigitSet(String[] digits, int n) {\n       \n        int count = 0;\n        \n        String boundaryString = String.valueOf(n);\n        \n        for(int i=1;i<boundaryString.length();i++){\n            count += Math.pow(digits.length, i);\n        }\n        \n        int i=0;\n        \n        while(i< digits.length){\n            int j=0;\n            \n            while(j<digits.length && Integer.parseInt(digits[j]) < Integer.parseInt(String.valueOf(boundaryString.charAt(i)))){\n                count += Math.pow(digits.length, boundaryString.length()-i-1);\n                j++;\n            }\n            \n            if(j == digits.length || Integer.parseInt(digits[j]) >Integer.parseInt( String.valueOf(boundaryString.charAt(i)))){\n                break;\n            }\n            i++;\n        }\n        \n        if(i == boundaryString.length()){\n            count++;\n        }\n        \n        return count;\n    }\n    \n}","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"numbers-at-most-n-given-digit-set"}