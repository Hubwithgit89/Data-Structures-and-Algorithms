{"id":602692326,"lang":"java","time":"6 days, 2 hours","timestamp":1639658752,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/602692326/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"51.6 MB","code":"class Solution {\n    int[][] dirs = {{-1,0}, {1,0}, {0,1}, {0,-1}};\n    \n    public int longestIncreasingPath(int[][] matrix) {\n        if(matrix == null || matrix.length == 0) return 0;\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[][] mem = new int[m][n];\n        int longestPath = 0;\n        for(int i=0; i<m;i++){\n            for(int j=0;j<n;j++){\n                int currentPath = getLongestPath(matrix, m, n, i,j, mem);\n                longestPath = Math.max(longestPath, currentPath);\n            }\n        }\n        return longestPath;\n    }\n    \n    public int getLongestPath(int[][] matrix, int m , int n, int i , int j, int[][] mem){\n        if(mem[i][j] > 0) return mem[i][j];\n        int max = 0;\n        \n        for(int[] dir:dirs){\n            int x = i+dir[0], y = j + dir[1];\n            if(x>=0 && x < m && y>=0 && y<n && matrix[x][y] > matrix[i][j]){\n                int path = getLongestPath(matrix, m, n , x, y, mem);\n                max = Math.max(path, max);\n            }\n        }\n        mem[i][j] = max+1;\n        \n        return max+1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}