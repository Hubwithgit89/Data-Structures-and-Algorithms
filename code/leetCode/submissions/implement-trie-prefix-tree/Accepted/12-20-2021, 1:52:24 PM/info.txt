{"id":604385377,"lang":"java","time":"2 days, 6 hours","timestamp":1639988544,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/604385377/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"48.6 MB","code":"class Trie {\n    \n    private TrieNode root;\n    \n    class TrieNode{\n        \n        private TrieNode[] links;\n        private final int R = 26;\n        private boolean isEnd;\n        \n        public TrieNode(){\n            links = new TrieNode[R];\n        }\n        \n        public boolean containsKey(char ch){\n            return links[ch-'a'] != null;\n        }\n        \n        public TrieNode get(char ch){\n            return links[ch-'a'];\n        }\n        \n        public void put(char ch, TrieNode node){\n            links[ch-'a'] = node;\n        }\n        \n        public void setEnd(){\n            isEnd = true;\n        }\n        \n        public boolean isEnd(){\n            return isEnd;\n        }\n    }\n\n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode node = root;\n        \n        for(int i=0;i<word.length();i++){\n            char currentChar = word.charAt(i);\n            \n            if(!node.containsKey(currentChar)){\n                node.put(currentChar, new TrieNode());\n            }\n            node = node.get(currentChar);\n        }\n        node.setEnd();\n    }\n    \n    public boolean search(String word) {\n        TrieNode node = searchPrefix(word);\n        return node!=null && node.isEnd();\n    }\n    \n    private TrieNode searchPrefix(String word){\n        TrieNode node = root;\n        for(int i=0;i<word.length();i++){\n            char currentCharacter = word.charAt(i);\n            if(node.containsKey(currentCharacter)){\n                node = node.get(currentCharacter);\n            }else{\n                return null;\n            }\n        }\n        \n        return node;\n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode node = searchPrefix(prefix);\n        return node != null;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}