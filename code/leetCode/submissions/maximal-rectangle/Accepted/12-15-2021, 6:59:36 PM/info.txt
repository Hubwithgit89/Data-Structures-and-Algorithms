{"id":602232481,"lang":"java","time":"1Â week","timestamp":1639574976,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/602232481/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"51.5 MB","code":"class Solution {\n            \n    public int maximalRectangle(char[][] input) {\n        int m = input.length;\n        int n = input[0].length;\n\n        int[][] matrix = new int[m][n];\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                matrix[i][j] = Character.getNumericValue(input[i][j]);\n            }\n        }\n        \n        int maxArea = Integer.MIN_VALUE;\n        int area = getMaxArea(matrix[0], n);        \n        maxArea = Math.max(area, maxArea);\n        \n        int[] hist = matrix[0];\n        \n        for(int i=1;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(matrix[i][j] == 1){\n                    hist[j] = hist[j] + matrix[i][j];\n                }else{\n                    hist[j] = 0;\n                }\n            }\n            area = getMaxArea(hist, n);\n            maxArea = Math.max(area, maxArea);\n        }\n        return maxArea == Integer.MIN_VALUE ? 0 : maxArea;\n        \n    }\n    \n    \n    public int getMaxArea(int hist[], int n) \n    {       \n        int maxArea = Integer.MIN_VALUE;\n        \n        int[] right = new int[n];\n        int[] left = new int[n];\n        \n        Stack<Integer> s = new Stack<>();\n        \n        // next smaller element to right\n        for(int i=n-1;i>=0;i--){\n            while(!s.isEmpty() && hist[s.peek()] >= hist[i] ){\n                s.pop();\n            }\n            if(s.isEmpty()){\n                right[i] = n;\n            }else{\n                right[i] = s.peek();\n            }\n            \n            s.push(i);\n        }\n        \n        s = new Stack<>();\n        \n        // next smaller element to left\n        // calculate width \n        // calculate area\n        // calculate max area\n         for(int i=0;i<n;i++){\n            while(!s.isEmpty() && hist[s.peek()] >= hist[i] ){\n                s.pop();\n            }\n            if(s.isEmpty()){\n                left[i] = -1;\n            }else{\n                left[i] = s.peek();\n            }\n            int width = right[i] - left[i] -1;\n            int area = width * hist[i];\n            maxArea = Math.max(maxArea, area);\n            s.push(i);\n        }\n        \n        return maxArea;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}