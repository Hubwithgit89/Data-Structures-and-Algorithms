{"id":604513778,"lang":"java","time":"1 day, 22 hours","timestamp":1640015299,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/604513778/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"39.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> answer = new ArrayList<String>();\n        if (root != null) searchBT(root, \"\", answer);\n        return answer;\n    }\n    \n    private void searchBT(TreeNode root, String path, List<String> answer) {\n        if (root.left == null && root.right == null) answer.add(path + root.val);\n        if (root.left != null) searchBT(root.left, path + root.val + \"->\", answer);\n        if (root.right != null) searchBT(root.right, path + root.val + \"->\", answer);\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths"}