{"id":586492916,"lang":"java","time":"1 month, 1 week","timestamp":1636812328,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/586492916/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"40.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        if(root == null ) return new ArrayList<>();\n        List<List<Integer>> res = new ArrayList<>();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        q.offer(null);\n        List<Integer> levelList = new ArrayList<>();\n        while(!q.isEmpty()){\n            TreeNode currentElement = q.poll();\n            if(currentElement == null){\n                res.add(levelList);\n                levelList = new ArrayList<>();\n                if(!q.isEmpty()){\n                 q.offer(null);\n                }\n            }else{\n                levelList.add(currentElement.val);\n                if(currentElement.left !=null) q.offer(currentElement.left);\n                if(currentElement.right !=null) q.offer(currentElement.right);\n            }\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}