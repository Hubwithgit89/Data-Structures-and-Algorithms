{"id":602949152,"lang":"java","time":"5 days, 12 hours","timestamp":1639708191,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/602949152/","is_pending":"Not Pending","title":"Maximal Square","memory":"52.2 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[][] dp = new int[m+1][n+1];\n        int maxLength = Integer.MIN_VALUE;\n        for(int i=1;i<=m;i++){\n            for(int j=1;j<=n;j++){\n                if(matrix[i-1][j-1] == '1'){\n                    dp[i][j] = Math.min(Math.min(dp[i][j-1], dp[i-1][j]), dp[i-1][j-1])+1;\n                    maxLength = Math.max(maxLength, dp[i][j]);\n                }\n            }\n        }\n        \n        System.out.println(Arrays.deepToString(dp));\n        return maxLength * maxLength;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}