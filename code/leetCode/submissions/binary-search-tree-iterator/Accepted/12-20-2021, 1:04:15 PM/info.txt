{"id":604369824,"lang":"java","time":"2 days, 7 hours","timestamp":1639985655,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/604369824/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"42.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    List<TreeNode> list = new ArrayList<>();\n    int currentIndex = -1;\n    \n    private void inOrder(TreeNode root){\n        if(root == null) return ;\n        inOrder(root.left);\n        list.add(root);\n        inOrder(root.right);\n    }\n    \n    public BSTIterator(TreeNode root) {\n        inOrder(root);        \n    }\n    \n    public int next() {\n        return list.get(++currentIndex).val;\n    }\n    \n    public boolean hasNext() {\n        return currentIndex+1 < list.size();\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}