{"id":598827758,"lang":"java","time":"2Â weeks","timestamp":1638964154,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/598827758/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"51.5 MB","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n        int n = nums.length;\n        int sum = 0;\n        \n        for(int i=0;i<n;i++){\n            sum+= nums[i];\n        }\n        \n        return sum % 2 ==1 ? false : isSubsetSum(nums, sum /2, n);\n    }\n    \n    public boolean isSubsetSum(int[] nums, int sum, int n){\n        boolean[][] subset = new boolean[n+1][sum+1];\n        \n        for(int i=0;i<n+1;i++){\n            for(int j=0;j< sum+1; j++){\n                if(i == 0 ) subset[i][j] = false;\n                if(j == 0) subset[i][j] = true;\n            }\n        }\n        \n       for(int i=1;i<n+1;i++){\n            for(int j=1;j< sum+1; j++){\n                if(nums[i-1] <= j){\n                    subset[i][j] = subset[i-1][j-nums[i-1]] || subset[i-1][j];\n                }else{\n                    subset[i][j] = subset[i-1][j];\n                }\n            }\n       }\n        return subset[n][sum];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum"}