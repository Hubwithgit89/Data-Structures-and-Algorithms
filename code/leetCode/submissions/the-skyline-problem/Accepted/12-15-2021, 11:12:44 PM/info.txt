{"id":602320186,"lang":"java","time":"6 days, 21 hours","timestamp":1639590164,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/602320186/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"49.9 MB","code":"class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n         List<List<Integer>> res = new ArrayList<>();\n        List<int[]> height = new ArrayList<>();\n        for (int[] building : buildings) {\n            height.add(new int[]{building[0], -building[2]});\n            height.add(new int[]{building[1], building[2]});\n        }\n        Collections.sort(height, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] a, int[] b) {\n                if (a[0] == b[0]) {\n                    return a[1] - b[1];\n                } else {\n                    return a[0] - b[0];\n                }\n            }\n        });\n        TreeMap<Integer, Integer> pq = new TreeMap<>();\n        pq.put(0, 1);\n        int prev = 0;\n        for (int[] h : height) {\n            if (h[1] < 0) {\n                pq.put(-h[1], pq.getOrDefault(-h[1], 0) + 1);\n            } else {  \n                if (pq.get(h[1]) > 1) {\n                    pq.put(h[1], pq.get(h[1]) - 1);\n                } else {\n                    pq.remove(h[1]);\n                }\n            }\n            int cur = pq.lastKey();\n            if (cur != prev) {\n                List<Integer> list = new ArrayList<>();\n                \n                list.add(h[0]);\n                list.add(cur);\n                res.add(list);\n                prev = cur;\n            }\n        }\n        return res;\n    }\n    }","compare_result":"1111111111111111111111111111111111111111","title_slug":"the-skyline-problem"}