{"id":590967549,"lang":"java","time":"1Â month","timestamp":1637584317,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/590967549/","is_pending":"Not Pending","title":"Merge Intervals","memory":"41.6 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));\n        List<int[]> output= new ArrayList<>();\n        int[] current_interval = intervals[0];\n        output.add(current_interval);\n        for(int[] interval : intervals){\n            int current_begin = current_interval[0];\n            int current_end = current_interval[1];\n            \n            int next_begin = interval[0];\n            int next_end = interval[1];\n            \n            if(current_end >= next_begin){\n                current_interval[1] = Math.max(current_end, next_end);\n            }else{\n                current_interval = interval;\n                output.add(current_interval);\n            }\n        }\n        \n        return output.toArray(new int[output.size()-1][]);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals"}