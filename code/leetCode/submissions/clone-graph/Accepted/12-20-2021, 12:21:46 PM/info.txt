{"id":604354166,"lang":"java","time":"2 days, 7 hours","timestamp":1639983106,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/604354166/","is_pending":"Not Pending","title":"Clone Graph","memory":"38.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n   public HashMap<Integer, Node> map = new HashMap<>();\n    \n    public Node cloneGraph(Node node) {\n        return clone(node);\n    }\n    \n    public Node clone(Node node) {\n        if (node == null) return null;\n        \n        if (map.containsKey(node.val)) \n            return map.get(node.val);\n        \n        Node newNode = new Node(node.val, new ArrayList<Node>());\n        map.put(newNode.val, newNode);\n        for (Node neighbor : node.neighbors) \n            newNode.neighbors.add(clone(neighbor));\n        return newNode;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph"}