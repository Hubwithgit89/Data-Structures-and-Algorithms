{"id":590947136,"lang":"java","time":"1Â month","timestamp":1637579111,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/590947136/","is_pending":"Not Pending","title":"Permutations","memory":"41.2 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> output = new ArrayList<>();\n        backtrack(output, new ArrayList<>(), nums);\n        return output;\n    }\n    \n    public void backtrack(List<List<Integer>> output, ArrayList<Integer> current, int[] nums){\n        if(current.size() == nums.length){\n            output.add(new ArrayList<>(current));\n        }else{\n            for(int i = 0; i < nums.length; i++){ \n             if(current.contains(nums[i])) continue; // element already exists, skip\n             current.add(nums[i]);\n             backtrack(output, current, nums);\n             current.remove(current.size() - 1);\n          }\n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations"}