{"id":602676102,"lang":"java","time":"6 days, 3 hours","timestamp":1639654635,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/602676102/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"123.4 MB","code":"class MedianFinder {\n\n    PriorityQueue<Integer> small = new PriorityQueue<>(Collections.reverseOrder());\n    PriorityQueue<Integer> large = new PriorityQueue<>();\n    \n    boolean even = true;\n    \n    public MedianFinder() {\n        \n    }\n    \n    public void addNum(int num) {\n        if(even){\n            large.offer(num);\n            small.offer(large.poll());\n        }else{\n            small.offer(num);\n            large.offer(small.poll());\n        }\n        even = !even;\n    }\n    \n    public double findMedian() {\n        if(even){\n            return (small.peek() + large.peek()) / 2.0;\n        }else{\n            return small.peek();\n        }\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}