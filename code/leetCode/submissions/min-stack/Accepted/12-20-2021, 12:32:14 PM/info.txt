{"id":604358220,"lang":"java","time":"2 days, 7 hours","timestamp":1639983734,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/604358220/","is_pending":"Not Pending","title":"Min Stack","memory":"41.1 MB","code":"class MinStack {\n    Stack<int[]> stack = new Stack<>();\n    public MinStack() {\n        \n    }\n    \n    public void push(int val) {\n        int[] currentElement = new int[2];\n        currentElement[0] = val;\n        if(stack.isEmpty()){\n            currentElement[1] = val;\n        }else{\n            int[] peekElement = stack.peek();\n            currentElement[1] = Math.min(val, peekElement[1]);\n        }\n        stack.push(currentElement);\n    }\n    \n    public void pop() {\n        stack.pop();\n    }\n    \n    public int top() {\n        return stack.peek()[0];\n    }\n    \n    public int getMin() {\n        return stack.peek()[1];\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */","compare_result":"1111111111111111111111111111111","title_slug":"min-stack"}